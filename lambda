import json
import os
import requests

def lambda_handler(event, context):
    cors_headers = {
        'Access-Control-Allow-Origin': '*',
        'Access-Control-Allow-Methods': 'OPTIONS,POST,GET',
        'Access-Control-Allow-Headers': 'Content-Type'
    }

    # Handle OPTIONS request (CORS preflight)
    if event['httpMethod'] == 'OPTIONS':
        return {
            'statusCode': 200,
            'headers': cors_headers,
            'body': ''
        }

    try:
        # Log the event
        print("Event:", event)

        # Parse the body and extract user prompt
        body = event.get('body', '{}')
        requestBody = json.loads(body)
        user_prompt = requestBody.get('content', '')

        if not user_prompt:
            return {
                'statusCode': 400,
                'headers': cors_headers,
                'body': json.dumps({'error': 'Content fehlt in der Anfrage'})
            }

        # OpenRouter API setup
        OPENROUTER_API_URL = "https://openrouter.ai/api/v1/chat/completions"
        OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")

        if not OPENROUTER_API_KEY:
            return {
                'statusCode': 500,
                'headers': cors_headers,
                'body': json.dumps({'error': 'API-Key fehlt'})
            }

        headers = {
            'Authorization': f"Bearer {OPENROUTER_API_KEY}",
            'Content-Type': 'application/json'
        }
        
        data = {
            "model": "openai/gpt-3.5-turbo",
            "messages": [{"role": "user", "content": user_prompt}]
        }

        # Make API request
        response = requests.post(OPENROUTER_API_URL, headers=headers, json=data, timeout=10)
        
        if response.status_code == 200:
            response_data = response.json()
            completion_text = response_data['choices'][0]['message']['content']
            
            return {
                'statusCode': 200,
                'headers': cors_headers,
                'body': json.dumps({'response': completion_text})
            }
        else:
            print("API error:", response.text)
            return {
                'statusCode': 502,
                'headers': cors_headers,
                'body': json.dumps({'error': 'Fehler bei der Anfrage an die OpenRouter API'})
            }

    except Exception as e:
        print("Error:", str(e))
        return {
            'statusCode': 500,
            'headers': cors_headers,
            'body': json.dumps({'error': str(e)})
        }
